// Code generated by MockGen. DO NOT EDIT.
// Source: ado.go

// Package db is a generated GoMock package.
package db

import (
	gomock "github.com/golang/mock/gomock"
	model "myProject/model"
	reflect "reflect"
)

// MockJinZhu is a mock of JinZhu interface
type MockJinZhu struct {
	ctrl     *gomock.Controller
	recorder *MockJinZhuMockRecorder
}

// MockJinZhuMockRecorder is the mock recorder for MockJinZhu
type MockJinZhuMockRecorder struct {
	mock *MockJinZhu
}

// NewMockJinZhu creates a new mock instance
func NewMockJinZhu(ctrl *gomock.Controller) *MockJinZhu {
	mock := &MockJinZhu{ctrl: ctrl}
	mock.recorder = &MockJinZhuMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJinZhu) EXPECT() *MockJinZhuMockRecorder {
	return m.recorder
}

// InitTable mocks base method
func (m *MockJinZhu) InitTable(value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitTable", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitTable indicates an expected call of InitTable
func (mr *MockJinZhuMockRecorder) InitTable(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitTable", reflect.TypeOf((*MockJinZhu)(nil).InitTable), value)
}

// Create mocks base method
func (m *MockJinZhu) Create(value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockJinZhuMockRecorder) Create(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJinZhu)(nil).Create), value)
}

// Creates mocks base method
func (m *MockJinZhu) Creates(slice *[]model.DemoOrder) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Creates", slice)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Creates indicates an expected call of Creates
func (mr *MockJinZhuMockRecorder) Creates(slice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Creates", reflect.TypeOf((*MockJinZhu)(nil).Creates), slice)
}

// UpdateByAmout mocks base method
func (m *MockJinZhu) UpdateByAmout(id uint, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByAmout", id, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByAmout indicates an expected call of UpdateByAmout
func (mr *MockJinZhuMockRecorder) UpdateByAmout(id, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByAmout", reflect.TypeOf((*MockJinZhu)(nil).UpdateByAmout), id, amount)
}

// UpdateByStatus mocks base method
func (m *MockJinZhu) UpdateByStatus(id uint, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByStatus", id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByStatus indicates an expected call of UpdateByStatus
func (mr *MockJinZhuMockRecorder) UpdateByStatus(id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByStatus", reflect.TypeOf((*MockJinZhu)(nil).UpdateByStatus), id, status)
}

// UpdateByFileURL mocks base method
func (m *MockJinZhu) UpdateByFileURL(id uint, fileURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByFileURL", id, fileURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByFileURL indicates an expected call of UpdateByFileURL
func (mr *MockJinZhuMockRecorder) UpdateByFileURL(id, fileURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByFileURL", reflect.TypeOf((*MockJinZhu)(nil).UpdateByFileURL), id, fileURL)
}

// FindByID mocks base method
func (m *MockJinZhu) FindByID(value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindByID indicates an expected call of FindByID
func (mr *MockJinZhuMockRecorder) FindByID(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockJinZhu)(nil).FindByID), value)
}

// FindByName mocks base method
func (m *MockJinZhu) FindByName(name string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindByName indicates an expected call of FindByName
func (mr *MockJinZhuMockRecorder) FindByName(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockJinZhu)(nil).FindByName), name, value)
}

// FindByOrderNo mocks base method
func (m *MockJinZhu) FindByOrderNo(orderNo string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByOrderNo", orderNo, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindByOrderNo indicates an expected call of FindByOrderNo
func (mr *MockJinZhuMockRecorder) FindByOrderNo(orderNo, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByOrderNo", reflect.TypeOf((*MockJinZhu)(nil).FindByOrderNo), orderNo, value)
}

// FindAll mocks base method
func (m *MockJinZhu) FindAll(values *[]model.DemoOrder) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", values)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockJinZhuMockRecorder) FindAll(values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockJinZhu)(nil).FindAll), values)
}

// FindAboutCreateTime mocks base method
func (m *MockJinZhu) FindAboutCreateTime(demos *[]model.DemoOrder, time string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAboutCreateTime", demos, time)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindAboutCreateTime indicates an expected call of FindAboutCreateTime
func (mr *MockJinZhuMockRecorder) FindAboutCreateTime(demos, time interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAboutCreateTime", reflect.TypeOf((*MockJinZhu)(nil).FindAboutCreateTime), demos, time)
}

// OrderCreateTime mocks base method
func (m *MockJinZhu) OrderCreateTime(demos *[]model.DemoOrder, isDesc bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderCreateTime", demos, isDesc)
	ret0, _ := ret[0].(error)
	return ret0
}

// OrderCreateTime indicates an expected call of OrderCreateTime
func (mr *MockJinZhuMockRecorder) OrderCreateTime(demos, isDesc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderCreateTime", reflect.TypeOf((*MockJinZhu)(nil).OrderCreateTime), demos, isDesc)
}

// OrderAmount mocks base method
func (m *MockJinZhu) OrderAmount(demos *[]model.DemoOrder, isDesc bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderAmount", demos, isDesc)
	ret0, _ := ret[0].(error)
	return ret0
}

// OrderAmount indicates an expected call of OrderAmount
func (mr *MockJinZhuMockRecorder) OrderAmount(demos, isDesc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderAmount", reflect.TypeOf((*MockJinZhu)(nil).OrderAmount), demos, isDesc)
}

// OrderAmountRank mocks base method
func (m *MockJinZhu) OrderAmountRank(demos *[]model.DemoOrder, limit int, isDesc bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderAmountRank", demos, limit, isDesc)
	ret0, _ := ret[0].(error)
	return ret0
}

// OrderAmountRank indicates an expected call of OrderAmountRank
func (mr *MockJinZhuMockRecorder) OrderAmountRank(demos, limit, isDesc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderAmountRank", reflect.TypeOf((*MockJinZhu)(nil).OrderAmountRank), demos, limit, isDesc)
}
